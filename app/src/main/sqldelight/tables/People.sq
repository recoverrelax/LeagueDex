CREATE TABLE peopleEntity(
    id INTEGER NOT NULL PRIMARY KEY,
    name TEXT NOT NULL,
    specieId INTEGER
);

CREATE TABLE peopleFavouritesEntity(
    peopleId INTEGER NOT NULL PRIMARY KEY,
    isFavourite INTEGER AS Boolean DEFAULT 0
);

CREATE TABLE IF NOT EXISTS peopleVehicles(
    peopleId INTEGER NOT NULL,
    vehicleId INTEGER NOT NULL,
    PRIMARY KEY (peopleId, vehicleId)
);

CREATE TRIGGER DeletePeopleVehiclesForPeopleId
AFTER DELETE ON peopleEntity
FOR EACH ROW
BEGIN
    DELETE FROM peopleVehicles WHERE old.id = peopleVehicles.peopleId;
END;

CREATE TRIGGER DeletePeopleVehiclesForPeopleIdVehicleId
AFTER DELETE ON vehicleEntity
FOR EACH ROW
BEGIN
    DELETE FROM peopleVehicles WHERE old.id = peopleVehicles.vehicleId;
END;

CREATE TRIGGER NullSpecieIdForPeopleEntity
AFTER DELETE ON specieEntity
FOR EACH ROW
BEGIN
    UPDATE peopleEntity SET specieId = NULL WHERE old.id;
END;

CREATE TRIGGER DeletePeopleFavourites
AFTER DELETE ON peopleEntity
FOR EACH ROW
BEGIN
    DELETE FROM peopleFavouritesEntity WHERE old.id = peopleFavouritesEntity.peopleId;
END;

CREATE VIEW vehiclesByUser AS
SELECT vehicleEntity.name AS vname, peopleVehicles.peopleId AS pdi FROM peopleVehicles INNER JOIN vehicleEntity ON peopleVehicles.vehicleId == vehicleEntity.id;

CREATE VIEW peopleWithLanguageAndVehicles AS
SELECT peopleEntity.id, peopleEntity.name, specieEntity.language, isFavourite, ifnull(GROUP_CONCAT(vname), '') vehicles FROM peopleEntity
LEFT JOIN specieEntity ON peopleEntity.specieId == specieEntity.id
LEFT JOIN vehiclesByUser ON peopleEntity.id == pdi
LEFT JOIN peopleFavouritesEntity ON peopleEntity.id == peopleFavouritesEntity.peopleId
GROUP BY peopleEntity.id;

peopleWithLanguage:
SELECT * FROM (
    SELECT * FROM peopleWithLanguageAndVehicles WHERE CASE
            WHEN :queryType == 0 AND name = '' THEN 1=1
            WHEN :queryType == 0 AND name != '' THEN name >= :name
            WHEN :queryType > 0 THEN name > :name
            ELSE name < :name END
    ORDER BY
        CASE WHEN :queryType < 0 THEN name END DESC,
        CASE WHEN 1=1 THEN name END ASC
    LIMIT :limit
)
ORDER BY name;

getPeopleWithLanguageWithLimitOffset:
SELECT * FROM peopleWithLanguageAndVehicles
ORDER BY name LIMIT :limit OFFSET :offset;

countPeopleWithLanguage:
SELECT COUNT(*) FROM peopleWithLanguageAndVehicles;

insertPeopleVehicles:
INSERT OR REPLACE INTO peopleVehicles VALUES ?;

insertPeople:
INSERT OR REPLACE INTO peopleEntity VALUES ?;

insertOrReplaceFavourite:
INSERT OR REPLACE INTO peopleFavouritesEntity VALUES ?;

getAll:
SELECT * FROM peopleEntity;

existsPeople:
SELECT EXISTS (SELECT 1 FROM peopleEntity);

existsPeopleVehicles:
SELECT EXISTS (SELECT 1 FROM peopleVehicles);